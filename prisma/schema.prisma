generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BotState {
  id         Int      @id @default(1)
  cash       Decimal  @db.Decimal(18, 6)
  pnl        Decimal  @db.Decimal(18, 6)
  equity     Decimal  @db.Decimal(18, 6)
  lastRunDay String?  @db.VarChar(10)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Recommendation {
  id          Int      @id @default(autoincrement())
  ticker      String
  price       Decimal? @db.Decimal(18, 6)
  at          DateTime @default(now())
  explanation String?

  @@index([ticker, at])
}

model Position {
  id            Int       @id @default(autoincrement())
  ticker        String
  entryPrice    Decimal   @db.Decimal(18, 6)
  shares        Int
  entryAt       DateTime  @default(now())
  open          Boolean   @default(true)
  exitPrice     Decimal?  @db.Decimal(18, 6)
  exitAt        DateTime?
  brokerOrderId String?   @unique

  @@index([open, id])
}

model Trade {
  id            Int       @id @default(autoincrement())
  side          String
  ticker        String
  price         Decimal   @db.Decimal(18, 6)
  shares        Int
  at            DateTime  @default(now())
  brokerOrderId String?   @unique
  filledAt      DateTime?
  filledPrice   Decimal?  @db.Decimal(18, 6)

  @@index([ticker, at])
}
